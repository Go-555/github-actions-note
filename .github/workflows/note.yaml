name: Note Workflow

on:
  workflow_dispatch:
    inputs:
      theme:
        description: '記事テーマ'
        required: true
        type: string
      target:
        description: '想定読者（ペルソナ）'
        required: true
        type: string
      message:
        description: '読者に伝えたい核メッセージ'
        required: true
        type: string
      cta:
        description: '読後のアクション（CTA）'
        required: true
        type: string
      tags:
        description: 'カンマ区切りタグ（任意）'
        required: false
        default: ''
        type: string
      is_public:
        description: '公開(true)/下書き(false)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      dry_run:
        description: '投稿をスキップ（生成のみ）'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read

env:
  TZ: Asia/Tokyo

jobs:
  research:
    name: Research (Gemini + Google Search)
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
    outputs:
      research_b64: ${{ steps.collect.outputs.research_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Gemini SDK
        run: |
          npm init -y
          npm i @google/generative-ai

      - name: Research with Gemini
        run: |
          cat > research.mjs <<'EOF'
          import { GoogleGenerativeAI } from '@google/generative-ai';
          import fs from 'fs';
          const theme = process.env.THEME || '';
          const target = process.env.TARGET || '';
          const today = new Date().toISOString().slice(0,10);
          const apiKey = process.env.GEMINI_API_KEY || '';
          if(!apiKey){
            console.error('GEMINI_API_KEY is not set');
            process.exit(1);
          }
          const artifactsDir = '.note-artifacts';
          fs.mkdirSync(artifactsDir, { recursive: true });

          const systemInstruction = [
            'あなたは最新情報の収集と要約に特化した超一流のリサーチャーです。',
            'Google検索ツールを活用して一次情報を最優先で参照し、本文内にMarkdownリンクで出典を必ず埋め込んでください。',
            '十分な分量（目安: 2,000語以上）と論理的な構成で、各節に最新の統計・事例・課題と展望を含めます。',
            '途中経過や確認質問は行わず、最終レポートのみを返してください。',
          ].join('\n');

          const prompt = [
            `以下のテーマとターゲットに対する最終版のリサーチレポートを作成してください。`,
            `テーマ: ${theme}`,
            `ターゲット: ${target}`,
            `現在日付: ${today}`,
            '',
            '要件:',
            '1. 事実に基づき、本文中にMarkdownリンクで出典を埋め込むこと。',
            '2. 一次情報（公的機関・論文・公式発表）を優先し、必要に応じてGoogle検索ツールを呼び出してください。',
            '3. セクションを分けて、最新動向・課題と解決策・将来展望などを網羅してください。',
            '4. 不明点は「前提と仮定」で明示してから記述を続行してください。',
          ].join('\n');

          const genAI = new GoogleGenerativeAI(apiKey);
          const model = genAI.getGenerativeModel({
            model: 'gemini-1.5-pro',
            systemInstruction,
            tools: [{ googleSearch: {} }],
          });

          function readText(response){
            if(!response) return '';
            if(typeof response.text === 'function'){
              const t = response.text();
              if(t) return t;
            }
            const candidates = response.candidates || [];
            const parts = candidates.flatMap(c => (c.content?.parts || []));
            return parts.map(p => p.text).filter(Boolean).join('\n');
          }

          async function main(){
            try {
              const result = await model.generateContent({
                contents: [{ role: 'user', parts: [{ text: prompt }]}],
                generationConfig: { temperature: 0.35, maxOutputTokens: 8192 },
              });
              const text = readText(result.response) || '';
              fs.writeFileSync(`${artifactsDir}/research.md`, text);
              try {
                const trace = { prompt, response: result.response };
                fs.writeFileSync(`${artifactsDir}/research_trace.json`, JSON.stringify(trace, null, 2));
              } catch {}
            } catch (error) {
              console.error('Gemini research failed:', error);
              throw error;
            }
          }

          await main();
          EOF
          node research.mjs

      - name: Collect research
        id: collect
        run: |
          b64=$(base64 -w 0 .note-artifacts/research.md 2>/dev/null || base64 .note-artifacts/research.md)
          echo "research_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-artifacts
          path: |
            .note-artifacts/research.md
            .note-artifacts/research_trace.json

  write:
    name: Write (Gemini 1.5 Pro)
    needs: research
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
      MESSAGE: ${{ github.event.inputs.message }}
      CTA: ${{ github.event.inputs.cta }}
      INPUT_TAGS: ${{ github.event.inputs.tags }}
    outputs:
      title: ${{ steps.collect.outputs.title }}
      draft_json_b64: ${{ steps.collect.outputs.draft_json_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Gemini SDK
        run: |
          npm init -y
          npm i @google/generative-ai

      - name: Restore research
        env:
          RESEARCH_B64: ${{ needs.research.outputs.research_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$RESEARCH_B64" | base64 -d > .note-artifacts/research.md || echo "$RESEARCH_B64" | base64 --decode > .note-artifacts/research.md

      - name: Generate draft (title/body/tags)
        run: |
          cat > write.mjs <<'EOF'
          import { GoogleGenerativeAI } from '@google/generative-ai';
          import fs from 'fs';
          const theme=process.env.THEME||''; const target=process.env.TARGET||''; const message=process.env.MESSAGE||''; const cta=process.env.CTA||'';
          const inputTags=(process.env.INPUT_TAGS||'').split(',').map(s=>s.trim()).filter(Boolean);
          const researchReport=fs.readFileSync('.note-artifacts/research.md','utf8');
          const apiKey=process.env.GEMINI_API_KEY||'';
          if(!apiKey){ console.error('GEMINI_API_KEY is not set'); process.exit(1); }
          function extractJsonFlexible(raw){const t=(raw||'').trim().replace(/\u200B/g,'');try{return JSON.parse(t);}catch{}const m=t.match(/```[a-zA-Z]*\s*([\s\S]*?)\s*```/);if(m&&m[1]){try{return JSON.parse(m[1].trim());}catch{}}const f=t.indexOf('{'),l=t.lastIndexOf('}');if(f!==-1&&l!==-1&&l>f){const c=t.slice(f,l+1);try{return JSON.parse(c);}catch{}}return null;}
          const genAI=new GoogleGenerativeAI(apiKey);
          const model=genAI.getGenerativeModel({
            model: 'gemini-1.5-pro',
            systemInstruction: 'note.com向け長文記事の生成。JSON {"title":string,"draftBody":string,"tags":string[]} で返答し、draftBodyは6000〜9000文字を目安に十分な分量で章立てと箇条書きを含めること。',
          });
          function readText(response){
            if(!response) return '';
            if(typeof response.text === 'function'){
              const t=response.text();
              if(t) return t;
            }
            const candidates=response.candidates||[];
            const parts=candidates.flatMap(c=>c.content?.parts||[]);
            return parts.map(p=>p.text).filter(Boolean).join('\n');
          }
          async function repairJson(raw){
            const repairModel=genAI.getGenerativeModel({ model: 'gemini-1.5-pro', systemInstruction: '入力されたテキストから {"title":string,"draftBody":string,"tags":string[]} のJSONのみを返答してください。' });
            const result=await repairModel.generateContent({ contents:[{role:'user',parts:[{text:String(raw||'')}]}], generationConfig:{temperature:0,maxOutputTokens:2048} });
            return extractJsonFlexible(readText(result.response));
          }
          function sanitizeTitle(t){
            let s=String(t||'').trim();
            // フェンスや見出し、引用符を除去
            s=s.replace(/^```[a-zA-Z0-9_-]*\s*$/,'').replace(/^```$/,'');
            s=s.replace(/^#+\s*/,'');
            s=s.replace(/^"+|"+$/g,'').replace(/^'+|'+$/g,'');
            s=s.replace(/^`+|`+$/g,'');
            s=s.replace(/^json$/i,'').trim();
            if(!s) s='タイトル（自動生成）';
            return s;
          }
          function deriveTitleFromText(text){
            const lines=(text||'').split(/\r?\n/).map(l=>l.trim()).filter(Boolean);
            const firstReal=lines.find(l=>!/^```/.test(l))||lines[0]||'';
            return sanitizeTitle(firstReal);
          }
          const prompt=[`{テーマ}: ${theme}`,`{ペルソナ}: ${target}`,`{リサーチ内容}: ${researchReport}`,`{伝えたいこと}: ${message}`,`{読後のアクション}: ${cta}`].join('\n');
          const result=await model.generateContent({ contents:[{role:'user',parts:[{text:prompt}]}], generationConfig:{temperature:0.7,maxOutputTokens:30000} });
          const responseText=readText(result.response);
          let obj=extractJsonFlexible(responseText)||await repairJson(responseText);
          let title, draftBody, tags; if(obj){title=sanitizeTitle(obj.title); draftBody=String(obj.draftBody||'').trim(); tags=Array.isArray(obj.tags)?obj.tags.map(String):[]}
          if(!title||!draftBody){ title=deriveTitleFromText(responseText||''); const lines=(responseText||'').split(/\r?\n/); draftBody=lines.slice(1).join('\n').trim()||(responseText||''); tags=[]}
          if(inputTags.length){tags=Array.from(new Set([...(tags||[]),...inputTags]));}
          fs.writeFileSync('.note-artifacts/draft.json',JSON.stringify({title,draftBody,tags},null,2));
          EOF
          node write.mjs

      - name: Collect draft
        id: collect
        run: |
          title=$(node -e "console.log(JSON.parse(require('fs').readFileSync('.note-artifacts/draft.json','utf8')).title)")
          b64=$(base64 -w 0 .note-artifacts/draft.json 2>/dev/null || base64 .note-artifacts/draft.json)
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$title" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "draft_json_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload draft artifact
        uses: actions/upload-artifact@v4
        with:
          name: draft-artifact
          path: .note-artifacts/draft.json

  factcheck:
    name: Fact-check (Gemini Fact-check)
    needs: write
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      TITLE: ${{ needs.write.outputs.title }}
    outputs:
      title: ${{ steps.collect.outputs.title }}
      final_b64: ${{ steps.collect.outputs.final_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Gemini SDK
        run: |
          npm init -y
          npm i @google/generative-ai

      - name: Restore draft json
        env:
          DRAFT_JSON_B64: ${{ needs.write.outputs.draft_json_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$DRAFT_JSON_B64" | base64 -d > .note-artifacts/draft.json || echo "$DRAFT_JSON_B64" | base64 --decode > .note-artifacts/draft.json

      - name: Fact-check with Gemini
        run: |
          cat > factcheck.mjs <<'EOF'
          import { GoogleGenerativeAI } from '@google/generative-ai';
          import fs from 'fs';
          const draft=JSON.parse(fs.readFileSync('.note-artifacts/draft.json','utf8'));
          const apiKey=process.env.GEMINI_API_KEY||'';
          if(!apiKey){ console.error('GEMINI_API_KEY is not set'); process.exit(1); }
          function extractJsonFlexible(raw){
            const t=(raw||'').trim().replace(/\u200B/g,'');
            try{ return JSON.parse(t); }catch{}
            const fence=t.match(/```[a-zA-Z]*\s*([\s\S]*?)\s*```/); if(fence&&fence[1]){ try{return JSON.parse(fence[1].trim());}catch{} }
            const f=t.indexOf('{'), l=t.lastIndexOf('}'); if(f!==-1&&l!==-1&&l>f){ const cand=t.slice(f,l+1); try{return JSON.parse(cand);}catch{} }
            return null;
          }
          function readText(response){
            if(!response) return '';
            if(typeof response.text === 'function'){
              const t=response.text();
              if(t) return t;
            }
            const candidates=response.candidates||[];
            const parts=candidates.flatMap(c=>c.content?.parts||[]);
            return parts.map(p=>p.text).filter(Boolean).join('\n');
          }

          const genAI=new GoogleGenerativeAI(apiKey);
          const systemInstruction=[
            'あなたは事実検証の専門家です。',
            'Google検索ツールを活用して原稿の主張・データ・引用の真偽を確認し、一次情報に基づいて本文を修正してください。',
            '修正後はJSON {"title":string,"body":string,"tags":string[]} のみを返答し、bodyには本文Markdownを格納します。',
            '引用追加時は本文内にMarkdownリンクを埋め込み、必要に応じて参考文献セクションを追記してください。'
          ].join('\n');
          const model=genAI.getGenerativeModel({
            model: 'gemini-1.5-pro',
            systemInstruction,
            tools: [{ googleSearch: {} }],
          });

          async function main(){
            const prompt=[
              '## 原稿',
              String(draft.draftBody||''),
              '',
              '## 既存タグ',
              JSON.stringify(Array.isArray(draft.tags)?draft.tags:[]),
              '',
              '## タスク',
              'Google検索ツールを必要に応じて呼び出し、原稿を事実検証してから修正後の本文をJSONで返してください。',
              '返答は必ず JSON 形式のみで、title/body/tags の3フィールドを含めます。'
            ].join('\n');

            const result=await model.generateContent({
              contents:[{role:'user',parts:[{text:prompt}]}],
              generationConfig:{temperature:0.2,maxOutputTokens:30000},
            });
            const text=readText(result.response);
            const obj=extractJsonFlexible(text);
            let title=process.env.TITLE || draft.title || '';
            let body=String(draft.draftBody||'');
            let tags=Array.isArray(draft.tags)?draft.tags.map(String):[];
            if(obj){
              if(obj.title) title=String(obj.title);
              if(typeof obj.body==='string') body=obj.body;
              else if(typeof obj.draftBody==='string') body=obj.draftBody;
              if(Array.isArray(obj.tags)) tags=obj.tags.map(String);
            } else if(text){
              body=text;
            }
            const out={ title, body, tags };
            fs.writeFileSync('.note-artifacts/final.json', JSON.stringify(out,null,2));
          }

          await main();
          EOF
          node factcheck.mjs

      - name: Upload fact-check artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-artifact
          path: .note-artifacts/final.json

      - name: Collect final
        id: collect
        run: |
          title=$(node -e "console.log(JSON.parse(require('fs').readFileSync('.note-artifacts/final.json','utf8')).title)")
          b64=$(base64 -w 0 .note-artifacts/final.json 2>/dev/null || base64 .note-artifacts/final.json)
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$title" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "final_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  post:
    name: Post to note.com (Playwright)
    needs: factcheck
    if: ${{ github.event.inputs.dry_run != 'true' }}
    runs-on: ubuntu-latest
    env:
      IS_PUBLIC: ${{ github.event.inputs.is_public }}
      STATE_JSON: ${{ secrets.NOTE_STORAGE_STATE_JSON }}
      START_URL: https://editor.note.com/new
    outputs:
      final_url: ${{ steps.publish.outputs.published_url || steps.publish.outputs.draft_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y
          npm i playwright marked
          npx playwright install --with-deps chromium | cat

      - name: Prepare storageState
        id: state
        run: |
          test -n "$STATE_JSON" || (echo "ERROR: NOTE_STORAGE_STATE_JSON secret is not set" && exit 1)
          mkdir -p "$RUNNER_TEMP"
          echo "$STATE_JSON" > "$RUNNER_TEMP/note-state.json"
          echo "STATE_PATH=$RUNNER_TEMP/note-state.json" >> $GITHUB_OUTPUT

      - name: Ensure jq (post)
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Restore final
        id: draft
        env:
          FINAL_B64: ${{ needs.factcheck.outputs.final_b64 }}
        run: |
          test -n "$FINAL_B64" || { echo "final_b64 output is empty"; exit 1; }
          echo "$FINAL_B64" | base64 -d > final.json || echo "$FINAL_B64" | base64 --decode > final.json
          echo "TITLE=$(jq -r .title final.json)" >> $GITHUB_OUTPUT
          echo "TAGS=$(jq -r '.tags | join(", ")' final.json)" >> $GITHUB_OUTPUT

      - name: Publish via Playwright (draft or public)
        id: publish
        env:
          TITLE: ${{ steps.draft.outputs.TITLE }}
          TAGS: ${{ steps.draft.outputs.TAGS }}
          STATE_PATH: ${{ steps.state.outputs.STATE_PATH }}
        run: |
          # 本文は後続スクリプト内でMarkdownリンク→素URL化などの前処理を行う
          cat > post.mjs <<'EOF'
          import { chromium } from 'playwright';
          import { marked } from 'marked';
          import fs from 'fs';
          import os from 'os';
          import path from 'path';

          function nowStr(){ const d=new Date(); const z=n=>String(n).padStart(2,'0'); return `${d.getFullYear()}-${z(d.getMonth()+1)}-${z(d.getDate())}_${z(d.getHours())}-${z(d.getMinutes())}-${z(d.getSeconds())}`; }

          const STATE_PATH=process.env.STATE_PATH;
          const START_URL=process.env.START_URL||'https://editor.note.com/new';
          const rawTitle=process.env.TITLE||'';
          const rawFinal=JSON.parse(fs.readFileSync('final.json','utf8'));
          const rawBody=String(rawFinal.body||'');
          const TAGS=process.env.TAGS||'';
          const IS_PUBLIC=String(process.env.IS_PUBLIC||'false')==='true';

          if(!fs.existsSync(STATE_PATH)){ console.error('storageState not found:', STATE_PATH); process.exit(1); }

          const ssDir=path.join(os.tmpdir(),'note-screenshots'); fs.mkdirSync(ssDir,{recursive:true}); const SS_PATH=path.join(ssDir,`note-post-${nowStr()}.png`);

          function sanitizeTitle(t){
            let s=String(t||'').trim();
            s=s.replace(/^```[a-zA-Z0-9_-]*\s*$/,'').replace(/^```$/,'');
            s=s.replace(/^#+\s*/,'');
            s=s.replace(/^"+|"+$/g,'').replace(/^'+|'+$/g,'');
            s=s.replace(/^`+|`+$/g,'');
            s=s.replace(/^json$/i,'').trim();
            // タイトルが波括弧や記号のみの時は無効として扱う
            if (/^[\{\}\[\]\(\)\s]*$/.test(s)) s='';
            if(!s) s='タイトル（自動生成）';
            return s;
          }
          function deriveTitleFromMarkdown(md){
            const lines=String(md||'').split(/\r?\n/);
            for (const line of lines){
              const l=line.trim();
              if(!l) continue;
              const m=l.match(/^#{1,3}\s+(.+)/); if(m) return sanitizeTitle(m[1]);
              if(!/^```|^>|^\* |^- |^\d+\. /.test(l)) return sanitizeTitle(l);
            }
            return '';
          }
          function normalizeBullets(md){
            // 先頭の中黒・ビュレットを箇条書きに正規化
            return String(md||'')
              .replace(/^\s*[•・]\s?/gm,'- ')
              .replace(/^\s*◦\s?/gm,'  - ');
          }
          function unwrapParagraphs(md){
            // 段落中の不必要な改行をスペースへ（見出し/リスト/引用/コードは除外）
            const lines=String(md||'').split(/\r?\n/);
            const out=[]; let buf=''; let inFence=false;
            for(const raw of lines){
              const line=raw.replace(/\u200B/g,'');
              if(/^```/.test(line)){ inFence=!inFence; buf+=line+'\n'; continue; }
              if(inFence){ buf+=line+'\n'; continue; }
              if(/^\s*$/.test(line)){ if(buf) out.push(buf.trim()); out.push(''); buf=''; continue; }
              // 箇条書きや番号付きの字下げ改行を一行に連結
              if(/^(#{1,6}\s|[-*+]\s|\d+\.\s|>\s)/.test(line)){
                if(buf){ out.push(buf.trim()); buf=''; }
                // 次の数行が連続して単語単位の改行の場合は連結
                out.push(line.replace(/\s+$/,''));
                continue;
              }
              // 行頭が1文字や数文字で改行されているケース（縦伸び）を連結
              if(buf){ buf += (/[。.!?)]$/.test(buf) ? '\n' : ' ') + line.trim(); }
              else { buf = line.trim(); }
            }
            if(buf) out.push(buf.trim());
            return out.join('\n');
          }
          function preferBareUrls(md){
            const embedDomains=['openai.com','youtube.com','youtu.be','x.com','twitter.com','speakerdeck.com','slideshare.net','google.com','maps.app.goo.gl','gist.github.com'];
            return String(md||'').replace(/\[([^\]]+)\]\((https?:\/\/[^\s)]+)\)/g,(m,text,url)=>{
              try{
                const u=new URL(url); const host=u.hostname.replace(/^www\./,'');
                const isEmbed = embedDomains.some(d=>host.endsWith(d) || (url.includes('google.com/maps') && d.includes('google.com')));
                return isEmbed ? `${text}\n${url}\n` : `${text} (${url})`;
              }catch{return `${text} ${url}`;}
            });
          }
          function isGarbageLine(line){
            return /^[\s\{\}\[\]\(\)`]+$/.test(line || '');
          }
          function normalizeListItemSoftBreaks(md){
            const lines=String(md||'').split(/\r?\n/);
            const out=[]; let inItem=false;
            const listStartRe=/^(\s*)(?:[-*+]\s|\d+\.\s)/;
            for (let i=0;i<lines.length;i++){
              const line=lines[i];
              if (listStartRe.test(line)){
                inItem=true;
                out.push(line.replace(/\s+$/,''));
                continue;
              }
              if (inItem){
                // 空行 or 次のリスト開始でアイテム終端
                if (!line.trim()) { out.push(line); inItem=false; continue; }
                if (listStartRe.test(line)) { inItem=false; out.push(line); continue; }
                // 継続行は1行へ連結
                const last = out.pop() || '';
                out.push(last + ' ' + line.trim());
                continue;
              }
              out.push(line);
            }
            return out.join('\n');
          }
          function splitMarkdownBlocks(md){
            const lines=String(md||'').split(/\r?\n/);
            const blocks=[]; let cur=[]; let inFence=false; let fenceTag='';
            for(const line of lines){
              const m=line.match(/^```(.*)$/);
              if(m){
                if(!inFence){ inFence=true; fenceTag=m[1]||''; cur.push(line); }
                else { inFence=false; fenceTag=''; cur.push(line); blocks.push(cur.join('\n')); cur=[]; continue; }
              } else if(!inFence && line.trim()===''){ if(cur.length){ blocks.push(cur.join('\n')); cur=[]; continue; } }
              else if(!inFence && isGarbageLine(line)) { continue; }
              cur.push(line);
            }
            if(cur.length) blocks.push(cur.join('\n'));
            return blocks.filter(b=>{ const t=b.trim(); return t.length>0 && !isGarbageLine(t); });
          }
          function mdToHtml(block){
            // JSONが紛れ込んでしまった場合は本文候補のみ抽出
            try{
              const maybe = JSON.parse(block);
              if (maybe && typeof maybe==='object' && !Array.isArray(maybe)){
                const candidates=[maybe.body, maybe.draftBody, maybe.content, maybe.text];
                const chosen=candidates.find(v=>typeof v==='string' && v.trim());
                if (chosen) block = String(chosen);
              }
            }catch{}
            const isList = /^\s*(?:[-*+]\s|\d+\.\s)/.test(block);
            return String(marked.parse(block, { gfm:true, breaks: !isList, mangle:false, headerIds:false }) || '');
          }
          function htmlFromMarkdown(md){
            // 全文を一括でHTML化（段落ベース）。リスト中の意図しない <br> を避けるため breaks=false
            return String(marked.parse(md, { gfm:true, breaks:false, mangle:false, headerIds:false }) || '');
          }
          async function insertHTML(page, locator, html){
            await locator.click();
            await locator.evaluate((el, html) => {
              el.focus();
              const sel = window.getSelection();
              const range = document.createRange();
              range.selectNodeContents(el);
              range.collapse(false);
              sel.removeAllRanges();
              sel.addRange(range);
              document.execCommand('insertHTML', false, html);
            }, html);
          }

          let TITLE=sanitizeTitle(rawTitle);
          let preBody = preferBareUrls(rawBody);
          preBody = normalizeBullets(preBody);
          preBody = normalizeListItemSoftBreaks(preBody);
          preBody = unwrapParagraphs(preBody);
          if(!TITLE || TITLE==='タイトル（自動生成）'){
            const d=deriveTitleFromMarkdown(preBody);
            if(d) TITLE=d;
          }
          const blocks = splitMarkdownBlocks(preBody);

          let browser, context, page;
          try{
            browser = await chromium.launch({ headless: true, args: ['--lang=ja-JP'] });
            context = await browser.newContext({ storageState: STATE_PATH, locale: 'ja-JP' });
            page = await context.newPage();
            page.setDefaultTimeout(180000);

            await page.goto(START_URL, { waitUntil: 'domcontentloaded' });
            await page.waitForSelector('textarea[placeholder*="タイトル"]');
            await page.fill('textarea[placeholder*="タイトル"]', TITLE);

            const bodyBox = page.locator('div[contenteditable="true"][role="textbox"]').first();
            await bodyBox.waitFor({ state: 'visible' });
            const htmlAll = htmlFromMarkdown(preBody);
            let pasted = false;
            try {
              const origin = new URL(START_URL).origin;
              await context.grantPermissions(['clipboard-read','clipboard-write'], { origin });
              await page.evaluate(async (html, plain) => {
                const item = new ClipboardItem({
                  'text/html': new Blob([html], { type: 'text/html' }),
                  'text/plain': new Blob([plain], { type: 'text/plain' }),
                });
                await navigator.clipboard.write([item]);
              }, htmlAll, preBody);
              await bodyBox.click();
              await page.keyboard.press('Control+V');
              await page.waitForTimeout(200);
              pasted = true;
            } catch (e) {
              // クリップボード権限が無い場合のフォールバック
            }
            if (!pasted) {
              // 一括HTML挿入フォールバック
              await insertHTML(page, bodyBox, htmlAll);
              await page.waitForTimeout(100);
            }

            if(!IS_PUBLIC){
              const saveBtn = page.locator('button:has-text("下書き保存"), [aria-label*="下書き保存"]').first();
              await saveBtn.waitFor({ state: 'visible' });
              if(await saveBtn.isEnabled()) { await saveBtn.click(); await page.locator('text=保存しました').waitFor({ timeout: 4000 }).catch(()=>{}); }
              await page.screenshot({ path: SS_PATH, fullPage: true });
              console.log('DRAFT_URL=' + page.url());
              console.log('SCREENSHOT=' + SS_PATH);
              process.exit(0);
            }

            const proceed = page.locator('button:has-text("公開に進む")').first();
            await proceed.waitFor({ state: 'visible' });
            for (let i=0;i<20;i++){ if (await proceed.isEnabled()) break; await page.waitForTimeout(100); }
            await proceed.click({ force: true });

            await Promise.race([
              page.waitForURL(/\/publish/i).catch(() => {}),
              page.locator('button:has-text("投稿する")').first().waitFor({ state: 'visible' }).catch(() => {}),
            ]);

            const tags=(TAGS||'').split(/[\n,]/).map(s=>s.trim()).filter(Boolean);
            if(tags.length){
              let tagInput=page.locator('input[placeholder*="ハッシュタグ"]');
              if(!(await tagInput.count())) tagInput=page.locator('input[role="combobox"]').first();
              await tagInput.waitFor({ state: 'visible' });
              for(const t of tags){ await tagInput.click(); await tagInput.fill(t); await page.keyboard.press('Enter'); await page.waitForTimeout(120); }
            }

            const publishBtn = page.locator('button:has-text("投稿する")').first();
            await publishBtn.waitFor({ state: 'visible' });
            for (let i=0;i<20;i++){ if (await publishBtn.isEnabled()) break; await page.waitForTimeout(100); }
            await publishBtn.click({ force: true });

            await Promise.race([
              page.waitForURL(u => !/\/publish/i.test(typeof u === 'string' ? u : u.toString()), { timeout: 20000 }).catch(() => {}),
              page.locator('text=投稿しました').first().waitFor({ timeout: 8000 }).catch(() => {}),
              page.waitForTimeout(5000),
            ]);

            await page.screenshot({ path: SS_PATH, fullPage: true });
            const finalUrl=page.url();
            console.log('PUBLISHED_URL=' + finalUrl);
            console.log('SCREENSHOT=' + SS_PATH);
          } finally {
            try{ await page?.close(); }catch{}
            try{ await context?.close(); }catch{}
            try{ await browser?.close(); }catch{}
          }
          EOF
          node post.mjs | tee post.log
          url=$(grep '^PUBLISHED_URL=' post.log | tail -n1 | cut -d'=' -f2-)
          draft=$(grep '^DRAFT_URL=' post.log | tail -n1 | cut -d'=' -f2-)
          shot=$(grep '^SCREENSHOT=' post.log | tail -n1 | cut -d'=' -f2-)
          if [ -n "$url" ]; then echo "published_url=$url" >> $GITHUB_OUTPUT; fi
          if [ -n "$draft" ]; then echo "draft_url=$draft" >> $GITHUB_OUTPUT; fi
          if [ -n "$shot" ]; then echo "screenshot=$shot" >> $GITHUB_OUTPUT; fi

      - name: Upload screenshot (if any)
        if: ${{ steps.publish.outputs.screenshot != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: note-screenshot
          path: ${{ steps.publish.outputs.screenshot }}

